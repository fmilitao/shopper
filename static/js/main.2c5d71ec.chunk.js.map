{"version":3,"sources":["shopper/redux/state.ts","shopper/redux/localStorage.ts","shopper/redux/slice.ts","shopper/redux/store.ts","shopper/components/shopping-list/AddButton.tsx","shopper/components/shopping-list/AddButtonContainer.tsx","shopper/components/item-list/AddButton.tsx","shopper/components/item-list/AddButtonContainer.tsx","shopper/components/common/Menu.tsx","shopper/components/app-bar/AppBar.tsx","shopper/components/app-bar/AppBarContainer.tsx","version.ts","shopper/components/common/List.tsx","shopper/components/shopping-list/ListContainer.tsx","shopper/components/shopping-list/GenericDialog.tsx","shopper/components/shopping-list/AddDialogContainer.tsx","shopper/components/shopping-list/AddDialog.tsx","shopper/components/item-list/GenericDialog.tsx","shopper/components/item-list/AddDialog.tsx","shopper/components/item-list/AddDialogContainer.tsx","shopper/components/shopping-list/EditDialogContainer.tsx","shopper/components/shopping-list/EditDialog.tsx","shopper/components/item-list/EditDialogContainer.tsx","shopper/components/item-list/EditDialog.tsx","shopper/components/item-list/ListContainer.tsx","shopper/components/common/Notifier.tsx","shopper/components/Main.tsx","shopper/App.tsx","serviceWorker.ts","index.tsx"],"names":["DialogType","ShopperStateSchema","title","type","properties","selectedList","lists","minItems","items","required","name","quantity","enabled","additionalProperties","key","validate","obj","test","Ajv","allErrors","compile","schema","console","error","JSON","stringify","errors","Error","initialState","defaultValue","raw","localStorage","getItem","parse","load","undefined","isInBounds","index","array","length","shopperSlice","createSlice","reducers","addList","state","action","dialogState","push","payload","editList","EDIT_LIST","deleteList","splice","selectList","deselectList","addItem","listIndex","editItem","EDIT_ITEM","itemIndex","item","deleteItem","toggleItem","openAddListDialog","ADD_LIST","openEditListDialog","openAddItemDialog","ADD_ITEM","openEditItemDialog","closeDialog","copyToClipboard","navigator","clipboard","writeText","logger","log","updateState","actions","reducer","store","configureStore","sliceActions","importFromClipboard","dispatch","readText","then","value","catch","message","subscribe","shallowClone","setItem","save","getState","useStyles","makeStyles","theme","createStyles","button","color","connector","connect","openDialog","props","classes","IconButton","className","edge","aria-label","onClick","React","useState","anchorEl","setAnchorEl","handleClose","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","map","label","MenuItem","root","flexGrow","menuButton","rightButton","display","justifyContent","alignItems","list","listName","totalItemCount","pendingItemCount","reduce","prev","curr","Number","AppBar","position","Toolbar","Typography","variant","SimpleList","sorted","sort","a","b","List","component","comment","ListItem","style","backgroundColor","ListItemText","primary","secondary","ListItemSecondaryAction","onEdit","onDelete","palette","background","default","flex","height","flexDirection","overflow","grey","dispatchToProps","isValid","newValue","trim","initialCheck","isValidCheck","setValidCheck","tmpValue","setTmpValue","isSet","Dialog","isOpen","onEnter","DialogTitle","DialogContent","DialogContentText","descriptionText","TextField","autoFocus","margin","onChange","target","fullWidth","DialogActions","Button","disabled","okText","id","placeholder","InputLabelProps","shrink","initialValue","close","padding","spacing","setOpen","setMessage","_event","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","isListSelected","isItemView","flexFlow","Notifier","createMuiTheme","MuiButtonBase","disableRipple","transitions","create","app","minHeight","ThemeProvider","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","App","document","getElementById","param","URL","href","searchParams","get","isDebug","ready","unregister","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2c5d71ec.chunk.js","sourcesContent":["import { ThunkAction, Action } from '@reduxjs/toolkit';\nexport interface Item {\n  name: string;\n  quantity: number;\n  enabled: boolean;\n}\n\nconst ItemSchema = {\n  type: 'object',\n  required: ['name', 'quantity', 'enabled'],\n  properties: {\n    name: {\n      type: 'string',\n    },\n    quantity: {\n      type: 'number',\n    },\n    enabled: {\n      type: 'boolean',\n    },\n  },\n};\n\nexport interface List {\n  name: string;\n  items: Item[];\n}\n\nconst ListSchema = {\n  type: 'object',\n  required: ['name', 'items'],\n  properties: {\n    name: {\n      type: 'string',\n    },\n    items: {\n      type: 'array',\n      minItems: 0,\n      items: ItemSchema,\n    },\n  },\n};\n\nexport interface ShopperState {\n  selectedList?: number;\n  lists: List[];\n  // not in schema\n  dialogState?: DialogState;\n}\n\nexport const ShopperStateSchema = {\n  title: 'ShopperState',\n  type: 'object',\n  properties: {\n    selectedList: {\n      type: 'number',\n    },\n    lists: {\n      type: 'array',\n      minItems: 0,\n      items: ListSchema,\n    },\n  },\n  additionalProperties: false,\n  required: ['lists'],\n};\n\n// not in schema\nexport enum DialogType {\n  ADD_LIST,\n  EDIT_LIST,\n  ADD_ITEM,\n  EDIT_ITEM,\n}\n\nexport interface AddListDialog {\n  type: DialogType.ADD_LIST;\n}\nexport interface AddItemDialog {\n  type: DialogType.ADD_ITEM;\n}\n\nexport interface EditListDialog {\n  type: DialogType.EDIT_LIST;\n  index: number;\n}\n\nexport interface EditItemDialog {\n  type: DialogType.EDIT_ITEM;\n  index: number;\n}\n\nexport type DialogState =\n  | AddListDialog\n  | AddItemDialog\n  | EditListDialog\n  | EditItemDialog;\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  ShopperState,\n  unknown,\n  Action<string>\n>;\n","import Ajv from 'ajv';\n\nimport type { ShopperState } from './state';\nimport { ShopperStateSchema as schema } from './state';\n\nconst key = 'shopper-state';\n\nexport function validate(obj: unknown): ShopperState {\n  const ajv = new Ajv({ allErrors: true });\n  const test = ajv.compile(schema);\n  if (test(obj)) {\n    return obj as ShopperState;\n  }\n  console.error(`Existing state object:\n${JSON.stringify(obj, null, 2)}\nFailed validation:\n${JSON.stringify(test.errors, null, 2)}`);\n\n  throw Error('Invalid localStorage object');\n}\n\nexport function load(defaultValue: ShopperState): ShopperState {\n  const raw = localStorage.getItem(key);\n  if (raw === null) {\n    return defaultValue;\n  }\n  const object = JSON.parse(raw);\n  return validate(object);\n}\n\nexport function save(state: ShopperState) {\n  const shallowClone = {\n    ...state,\n    // ensure not saved\n    dialogState: undefined,\n  };\n  localStorage.setItem(key, JSON.stringify(shallowClone));\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { ShopperState, DialogType, AppThunk } from './state';\r\nimport { load, validate } from './localStorage';\r\nimport { logger } from './store';\r\n\r\nconst defaultValue: ShopperState = {\r\n  selectedList: undefined,\r\n  lists: [],\r\n};\r\n\r\nconst initialState: ShopperState = load(defaultValue);\r\n\r\nconst isInBounds = <T>(index: number, array: T[]) =>\r\n  index >= 0 && index < array.length;\r\n\r\nexport const shopperSlice = createSlice({\r\n  name: 'shopper',\r\n  initialState,\r\n  reducers: {\r\n    // list\r\n    addList: (state, action: PayloadAction<string>) => {\r\n      state.dialogState = undefined;\r\n      state.lists.push({ name: action.payload, items: [] });\r\n    },\r\n    editList: (state, action: PayloadAction<string>) => {\r\n      const { dialogState } = state;\r\n      if (dialogState && dialogState.type === DialogType.EDIT_LIST) {\r\n        const { index } = dialogState;\r\n        const name = action.payload;\r\n        if (isInBounds(index, state.lists)) {\r\n          state.lists[index].name = name;\r\n        }\r\n      }\r\n      state.dialogState = undefined;\r\n    },\r\n    deleteList: (state, action: PayloadAction<number>) => {\r\n      const index = action.payload;\r\n      if (isInBounds(index, state.lists)) {\r\n        state.lists.splice(index, 1);\r\n      }\r\n    },\r\n    selectList: (state, action: PayloadAction<number>) => {\r\n      state.selectedList = action.payload;\r\n    },\r\n    deselectList: state => {\r\n      state.selectedList = undefined;\r\n    },\r\n    // item\r\n    addItem: (\r\n      state,\r\n      action: PayloadAction<{ name: string; quantity: number }>\r\n    ) => {\r\n      state.dialogState = undefined;\r\n      const { name, quantity } = action.payload;\r\n      const listIndex = state.selectedList;\r\n      if (listIndex !== undefined && isInBounds(listIndex, state.lists)) {\r\n        state.lists[listIndex].items.push({\r\n          name,\r\n          quantity,\r\n          enabled: true,\r\n        });\r\n      }\r\n    },\r\n    editItem: (\r\n      state,\r\n      action: PayloadAction<{ name: string; quantity: number }>\r\n    ) => {\r\n      const { dialogState } = state;\r\n      if (dialogState && dialogState.type === DialogType.EDIT_ITEM) {\r\n        const { index } = dialogState;\r\n        const { name, quantity } = action.payload;\r\n        const listIndex = state.selectedList;\r\n        const itemIndex = index;\r\n        if (\r\n          listIndex !== undefined &&\r\n          isInBounds(listIndex, state.lists) &&\r\n          isInBounds(itemIndex, state.lists[listIndex].items)\r\n        ) {\r\n          const item = state.lists[listIndex].items[itemIndex];\r\n          item.name = name;\r\n          item.quantity = quantity;\r\n        }\r\n      }\r\n      state.dialogState = undefined;\r\n    },\r\n    deleteItem: (state, action: PayloadAction<number>) => {\r\n      const listIndex = state.selectedList;\r\n      const itemIndex = action.payload;\r\n      if (\r\n        listIndex !== undefined &&\r\n        isInBounds(listIndex, state.lists) &&\r\n        isInBounds(itemIndex, state.lists[listIndex].items)\r\n      ) {\r\n        state.lists[listIndex].items.splice(itemIndex, 1);\r\n      }\r\n    },\r\n    toggleItem: (state, action: PayloadAction<number>) => {\r\n      const listIndex = state.selectedList;\r\n      const itemIndex = action.payload;\r\n      if (\r\n        listIndex !== undefined &&\r\n        isInBounds(listIndex, state.lists) &&\r\n        isInBounds(itemIndex, state.lists[listIndex].items)\r\n      ) {\r\n        const item = state.lists[listIndex].items[itemIndex];\r\n        item.enabled = !item.enabled;\r\n      }\r\n    },\r\n    // dialog\r\n    openAddListDialog: state => {\r\n      state.dialogState = {\r\n        type: DialogType.ADD_LIST,\r\n      };\r\n    },\r\n    openEditListDialog: (state, action: PayloadAction<number>) => {\r\n      state.dialogState = {\r\n        type: DialogType.EDIT_LIST,\r\n        index: action.payload,\r\n      };\r\n    },\r\n    openAddItemDialog: state => {\r\n      state.dialogState = {\r\n        type: DialogType.ADD_ITEM,\r\n      };\r\n    },\r\n    openEditItemDialog: (state, action: PayloadAction<number>) => {\r\n      state.dialogState = {\r\n        type: DialogType.EDIT_ITEM,\r\n        index: action.payload,\r\n      };\r\n    },\r\n    closeDialog: state => {\r\n      state.dialogState = undefined;\r\n    },\r\n    copyToClipboard: state => {\r\n      if (navigator?.clipboard?.writeText) {\r\n        navigator.clipboard.writeText(JSON.stringify(state));\r\n        logger.log('Copied to clipboard.');\r\n      } else {\r\n        logger.log('ERROR: Missing clipboard browser functionality');\r\n      }\r\n    },\r\n    updateState: (state, action: PayloadAction<ShopperState>) => {\r\n      state.lists = action.payload.lists;\r\n      state.selectedList = undefined;\r\n    },\r\n  },\r\n});\r\n\r\nexport const importFromClipboard = (): AppThunk => dispatch => {\r\n  if (navigator?.clipboard?.readText) {\r\n    navigator.clipboard\r\n      .readText()\r\n      .then(value => {\r\n        const obj = JSON.parse(value);\r\n        const state = validate(obj);\r\n        dispatch(actions.updateState(state));\r\n        logger.log('Imported from clipboard');\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        logger.log(`ERROR: ${error}`);\r\n      });\r\n  } else {\r\n    logger.log('ERROR: Missing clipboard browser functionality');\r\n  }\r\n};\r\n\r\nexport const { actions, reducer } = shopperSlice;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { reducer, actions as sliceActions, importFromClipboard } from './slice';\r\nimport { save } from './localStorage';\r\n\r\nexport const store = configureStore({ reducer });\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport const actions = {\r\n  ...sliceActions,\r\n  importFromClipboard,\r\n};\r\n\r\n// note that logger.log will be replaced by the `Notifier` element.\r\nexport const logger = { log: (message: string) => console.log(message) };\r\n\r\n// auto-save\r\nstore.subscribe(() => {\r\n  const state = store.getState();\r\n  save(state);\r\n  // console.log(JSON.stringify(state));\r\n});\r\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/AddShoppingCart';\nimport IconButton from '@material-ui/core/IconButton';\n\ninterface Props {\n  openDialog: () => void;\n}\n\nexport default function (props: Props) {\n  const classes = useStyles();\n\n  return (\n    <IconButton\n      className={classes.button}\n      edge=\"end\"\n      title=\"Add list\"\n      color=\"secondary\"\n      aria-label=\"add\"\n      onClick={() => props.openDialog()}\n    >\n      <AddIcon />\n    </IconButton>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    button: {\n      color: 'inherit',\n    },\n  })\n);\n","import { connect } from 'react-redux';\nimport { actions } from '../../redux/store';\nimport Component from './AddButton';\n\nconst connector = connect(() => ({}), {\n  openDialog: () => actions.openAddListDialog(),\n});\n\nexport default connector(Component);\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\n\ninterface Props {\n  openDialog: () => void;\n}\n\nexport default function (props: Props) {\n  const classes = useStyles();\n\n  return (\n    <IconButton\n      className={classes.button}\n      edge=\"end\"\n      title=\"Add item\"\n      color=\"secondary\"\n      aria-label=\"add\"\n      onClick={() => props.openDialog()}\n    >\n      <AddIcon />\n    </IconButton>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    button: {\n      color: 'inherit',\n    },\n  })\n);\n","import { connect } from 'react-redux';\nimport { actions } from '../../redux/store';\nimport Component from './AddButton';\n\nconst connector = connect(() => ({}), {\n  openDialog: () => actions.openAddItemDialog(),\n});\n\nexport default connector(Component);\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuIcon from '@material-ui/icons/MoreVert';\nimport IconButton from '@material-ui/core/IconButton';\n\ninterface Props {\n  actions: {\n    label: string;\n    action: () => void;\n  }[];\n}\n\nexport default function (props: Props) {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <IconButton\n        className={classes.button}\n        aria-controls=\"simple-menu\"\n        edge=\"end\"\n        aria-label=\"menu\"\n        color=\"secondary\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MenuIcon />\n      </IconButton>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {props.actions.map(({ label, action }, index) => (\n          <MenuItem\n            key={index}\n            onClick={() => {\n              handleClose();\n              action();\n            }}\n          >\n            {label}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    button: {\n      color: 'inherit',\n    },\n  })\n);\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/ArrowBackRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddList from '../shopping-list/AddButtonContainer';\nimport AddItem from '../item-list/AddButtonContainer';\nimport Menu from '../common/Menu';\n\nimport version from '../../../version';\nimport { logger } from '../../redux/store';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 0,\n    },\n    title: {\n      flexGrow: 0,\n    },\n    menuButton: {\n      flexGrow: 0,\n    },\n    rightButton: {\n      // flexDirection: 'row',\n      flexGrow: 1,\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'flex-end',\n      // border: '1px solid blue',\n    },\n  })\n);\n\ninterface Props {\n  selectedList?: {\n    listName: string;\n    pendingItemCount: number;\n    totalItemCount: number;\n  };\n  deselectList: () => void;\n  copyToClipboard: () => void;\n  importFromClipboard: () => void;\n}\n\nconst shopperTitle = 'Shopper';\n\nexport default function ButtonAppBar(props: Props) {\n  const classes = useStyles();\n\n  let title = shopperTitle;\n  if (props.selectedList) {\n    const { listName, pendingItemCount, totalItemCount } = props.selectedList;\n    title = listName!;\n    if (totalItemCount! > 0) {\n      title = `(${pendingItemCount}) ${title}`;\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {props.selectedList && (\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"menu\"\n              onClick={() => props.deselectList()}\n            >\n              <MenuIcon />\n            </IconButton>\n          )}\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            onClick={() => {\n              if (title === shopperTitle) {\n                logger.log(version);\n              }\n            }}\n          >\n            {title}\n          </Typography>\n          <div className={classes.rightButton}>\n            {props.selectedList ? <AddItem /> : <AddList />}\n          </div>\n          <Menu\n            actions={[\n              {\n                label: 'import from clipboard',\n                action: () => props.importFromClipboard(),\n              },\n              {\n                label: 'copy to clipboard',\n                action: () => props.copyToClipboard(),\n              },\n            ]}\n          ></Menu>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import { connect } from 'react-redux';\nimport type { RootState } from '../../redux/store';\nimport { actions } from '../../redux/store';\nimport Component from './AppBar';\n\nexport const mapStateToProps = (state: RootState) => {\n  if (state.selectedList !== undefined) {\n    const list = state.lists[state.selectedList!];\n    const listName = list.name;\n    const totalItemCount = list.items.length;\n    const pendingItemCount = list.items.reduce(\n      (prev, curr) => prev + Number(!!curr.enabled),\n      0\n    );\n    return {\n      selectedList: {\n        totalItemCount,\n        pendingItemCount,\n        listName,\n      },\n    };\n  }\n\n  return {\n    selectedList: undefined,\n  };\n};\n\nconst connector = connect(mapStateToProps, {\n  deselectList: () => actions.deselectList(),\n  copyToClipboard: () => actions.copyToClipboard(),\n  importFromClipboard: () => actions.importFromClipboard(),\n});\n\nexport default connector(Component);\n","export default 'commit: 01777e7 (2020-06-14T12:03:39.835Z)';\n","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Menu from './Menu';\n\ninterface Props {\n  lists: { name: string; comment: string; enabled?: boolean; index: number }[];\n  onClick(index: number): void;\n  onEdit(index: number): void;\n  onDelete(index: number): void;\n}\n\nexport default function SimpleList(props: Props) {\n  const classes = useStyles();\n\n  // sorts only by enabled / disabled\n  const sorted = props.lists.sort(\n    (a, b) => Number(!a.enabled) - Number(!b.enabled)\n  );\n\n  return (\n    <div className={classes.root}>\n      <List component=\"nav\" className={classes.list}>\n        {sorted.map(({ name, comment, enabled, index }) => (\n          <ListItem\n            // style override here so that ripple effect does not take priority\n            // enabled is true or undefined: white, else: gray\n            style={{ backgroundColor: enabled !== false ? 'white' : 'gray' }}\n            key={index}\n            button\n            onClick={() => props.onClick(index)}\n          >\n            <ListItemText primary={name} secondary={comment} />\n            <ListItemSecondaryAction className={classes.menuButton}>\n              <Menu\n                actions={[\n                  { label: 'edit', action: () => props.onEdit(index) },\n                  { label: 'delete', action: () => props.onDelete(index) },\n                ]}\n              />\n            </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.default,\n      flex: '1',\n      height: '90vh',\n      // border: '1px solid red',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    list: {\n      overflow: 'scroll',\n      // border: '1px solid blue',\n    },\n    menuButton: {\n      color: theme.palette.grey[500],\n    },\n  })\n);\n","import { connect } from 'react-redux';\nimport { actions, RootState } from '../../redux/store';\nimport List from '../common/List';\n\nconst mapToListState = (state: RootState) => {\n  return {\n    lists: state.lists.map(({ name, items }, index) => ({\n      name,\n      comment: `${items.length} items`,\n      index,\n    })),\n  };\n};\n\nconst dispatchToProps = {\n  onDelete: (index: number) => actions.deleteList(index),\n  onEdit: (index: number) => actions.openEditListDialog(index),\n  onClick: (index: number) => actions.selectList(index),\n};\n\nconst connector = connect(mapToListState, dispatchToProps);\n\nexport default connector(List);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n  value: string;\n  title: string;\n  okText: string;\n  descriptionText: string;\n  // internal\n  isOpen: boolean;\n  onClose: (value?: string) => void;\n}\n\nconst isValid = (newValue: string) => newValue.trim().length > 0;\n\nexport default function (props: Props) {\n  const initialCheck = isValid(props.value);\n  const [isValidCheck, setValidCheck] = React.useState(initialCheck);\n  const [tmpValue, setTmpValue] = React.useState(props.value);\n\n  function handleClose(isSet: boolean) {\n    if (isSet) {\n      props.onClose(tmpValue);\n    } else {\n      props.onClose();\n    }\n  }\n\n  function handleOpen() {\n    setTmpValue(props.value);\n    setValidCheck(isValid(props.value));\n  }\n\n  function handleChange(event: any) {\n    const newValue = event.target.value;\n    setTmpValue(newValue);\n    setValidCheck(isValid(newValue));\n  }\n\n  return (\n    <Dialog\n      open={props.isOpen}\n      onEnter={() => handleOpen()}\n      onClose={() => handleClose(false)}\n    >\n      <DialogTitle>{props.title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{props.descriptionText}</DialogContentText>\n        <TextField\n          error={!isValidCheck}\n          autoFocus\n          margin=\"dense\"\n          label=\"List name\"\n          type=\"text\"\n          onChange={handleChange}\n          fullWidth\n          value={tmpValue}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => handleClose(false)} color=\"primary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={() => handleClose(true)}\n          color=\"primary\"\n          disabled={!isValidCheck}\n        >\n          {props.okText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { connect } from 'react-redux';\nimport { actions, RootState } from '../../redux/store';\nimport Component from './AddDialog';\nimport { DialogType } from '../../redux/state';\n\nconst mapStateToProps = (state: RootState) => ({\n  isOpen: state.dialogState?.type === DialogType.ADD_LIST,\n});\n\nconst connector = connect(mapStateToProps, {\n  onClose: (value?: string) => {\n    if (value) {\n      return actions.addList(value);\n    }\n    return actions.closeDialog();\n  },\n});\n\nexport default connector(Component);\n","import React from 'react';\nimport ListDialog from './GenericDialog';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: (value?: string) => void;\n}\n\nconst initialValue = '';\n\nexport default function (props: Props) {\n  return (\n    <ListDialog\n      value={initialValue}\n      title=\"Create List\"\n      okText=\"Create\"\n      descriptionText=\"Pick the name for your new list.\"\n      {...props}\n    />\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n  title: string;\n  okText: string;\n  descriptionText: string;\n  // ...\n  isOpen: boolean;\n  value: { name: string; quantity: number };\n  onClose: (value?: { name: string; quantity: number }) => void;\n}\n\n// FIXME: validation should be by each field!\nconst isValid = (newValue: { name: string; quantity: number }) => ({\n  name: newValue.name.trim().length > 0,\n  quantity: newValue.quantity > 0,\n});\n\nexport default function (props: Props) {\n  const initialCheck = isValid(props.value);\n  const [isValidCheck, setValidCheck] = React.useState(initialCheck);\n  const [tmpValue, setTmpValue] = React.useState(props.value);\n\n  function handleClose(isSet: boolean) {\n    if (isSet) {\n      props.onClose(tmpValue);\n    } else {\n      props.onClose();\n    }\n    setTmpValue(props.value);\n  }\n\n  function handleNameChange(event: any) {\n    const newValue = { name: event.target.value, quantity: tmpValue.quantity };\n    setTmpValue(newValue);\n    setValidCheck(isValid(newValue));\n  }\n\n  function handleOpen() {\n    setTmpValue(props.value);\n    setValidCheck(isValid(props.value));\n  }\n\n  function handleQuantityChange(event: any) {\n    const newValue = {\n      name: tmpValue.name,\n      quantity: Number(event.target.value),\n    };\n    setTmpValue(newValue);\n    setValidCheck(isValid(newValue));\n  }\n\n  return (\n    <div>\n      <Dialog\n        open={props.isOpen}\n        onEnter={() => handleOpen()}\n        onClose={() => handleClose(false)}\n      >\n        <DialogTitle>{props.title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>{props.descriptionText}</DialogContentText>\n          <TextField\n            error={!isValidCheck.name}\n            autoFocus\n            margin=\"dense\"\n            label=\"Item name\"\n            type=\"text\"\n            onChange={handleNameChange}\n            fullWidth\n            value={tmpValue.name}\n          />\n          <TextField\n            error={!isValidCheck.quantity}\n            id=\"standard-number\"\n            label=\"Quantity\"\n            placeholder=\"How many of this item\"\n            value={tmpValue.quantity}\n            onChange={handleQuantityChange}\n            type=\"number\"\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"normal\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => handleClose(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => handleClose(true)}\n            color=\"primary\"\n            disabled={!isValidCheck.name || !isValidCheck.quantity}\n          >\n            {props.okText}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport ItemDialog from './GenericDialog';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: (value?: { name: string; quantity: number }) => void;\n}\n\nconst initialValue = { name: '', quantity: 1 };\n\nexport default function (props: Props) {\n  return (\n    <ItemDialog\n      value={initialValue}\n      title=\"Create Item\"\n      okText=\"Create\"\n      descriptionText=\"Pick the name for your new item.\"\n      {...props}\n    />\n  );\n}\n","import { connect } from 'react-redux';\nimport { actions, RootState } from '../../redux/store';\nimport Component from './AddDialog';\nimport { DialogType } from '../../redux/state';\n\nconst mapStateToProps = (state: RootState) => ({\n  isOpen: state.dialogState?.type === DialogType.ADD_ITEM,\n});\n\nconst connector = connect(mapStateToProps, {\n  onClose: (value?: { name: string; quantity: number }) => {\n    if (value) {\n      return actions.addItem(value);\n    }\n    return actions.closeDialog();\n  },\n});\n\nexport default connector(Component);\n","import { connect } from 'react-redux';\nimport { actions, RootState } from '../../redux/store';\nimport Component from './EditDialog';\nimport { DialogType } from '../../redux/state';\n\nconst mapStateToProps = (state: RootState) => {\n  const { dialogState } = state;\n  if (\n    dialogState?.type === DialogType.EDIT_LIST &&\n    dialogState.index >= 0 &&\n    dialogState.index < state.lists.length\n  ) {\n    const initialValue = state.lists[dialogState.index].name;\n    return {\n      isOpen: true,\n      initialValue,\n    };\n  }\n  return {\n    isOpen: false,\n    initialValue: '',\n  };\n};\n\nconst connector = connect(mapStateToProps, {\n  onClose: (value?: string) => {\n    if (value) {\n      return actions.editList(value);\n    }\n    return actions.closeDialog();\n  },\n});\n\nexport default connector(Component);\n","import React from 'react';\nimport ListDialog from './GenericDialog';\n\ninterface Props {\n  isOpen: boolean;\n  initialValue: string;\n  onClose: (value?: string) => void;\n}\n\nexport default function (props: Props) {\n  return (\n    <ListDialog\n      value={props.initialValue}\n      title=\"Edit List\"\n      okText=\"Update\"\n      descriptionText=\"Pick the name for your list.\"\n      {...props}\n    />\n  );\n}\n","import { connect } from 'react-redux';\nimport { actions, RootState } from '../../redux/store';\nimport Component from './EditDialog';\nimport { DialogType } from '../../redux/state';\n\nconst mapStateToProps = (state: RootState) => {\n  const { dialogState, selectedList } = state;\n  if (\n    selectedList !== undefined &&\n    selectedList >= 0 &&\n    selectedList < state.lists.length &&\n    dialogState?.type === DialogType.EDIT_ITEM &&\n    dialogState.index >= 0 &&\n    dialogState.index < state.lists[selectedList].items.length\n  ) {\n    const initialValue = state.lists[selectedList].items[dialogState.index];\n    return {\n      isOpen: true,\n      initialValue,\n    };\n  }\n  return {\n    isOpen: false,\n    initialValue: { name: '', quantity: 1 },\n  };\n};\n\nconst connector = connect(mapStateToProps, {\n  onClose: (value?: { name: string; quantity: number }) => {\n    if (value) {\n      return actions.editItem(value);\n    }\n    return actions.closeDialog();\n  },\n});\n\nexport default connector(Component);\n","import React from 'react';\nimport ListDialog from './GenericDialog';\n\ninterface Props {\n  isOpen: boolean;\n  initialValue: { name: string; quantity: number };\n  onClose: (value?: { name: string; quantity: number }) => void;\n}\n\nexport default function (props: Props) {\n  return (\n    <ListDialog\n      value={props.initialValue}\n      title=\"Edit List\"\n      okText=\"Update\"\n      descriptionText=\"Pick the name for your list.\"\n      {...props}\n    />\n  );\n}\n","import { connect } from 'react-redux';\nimport { actions, RootState } from '../../redux/store';\nimport List from '../common/List';\n\nconst mapToListState = (state: RootState) => {\n  const index = state.selectedList;\n  if (index !== undefined) {\n    return {\n      lists: state.lists[index].items.map(\n        ({ name, quantity, enabled }, index) => ({\n          name,\n          comment: `${quantity} elements`,\n          enabled,\n          index,\n        })\n      ),\n    };\n  }\n  return { lists: [] };\n};\n\nconst dispatchToProps = {\n  onDelete: (index: number) => actions.deleteItem(index),\n  onEdit: (index: number) => actions.openEditItemDialog(index),\n  onClick: (index: number) => actions.toggleItem(index),\n};\n\nconst connector = connect(mapToListState, dispatchToProps);\n\nexport default connector(List);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { logger } from '../../redux/store';\n\nconst useStyles = makeStyles(theme => ({\n  close: {\n    padding: theme.spacing(0.5),\n  },\n}));\n\n// from sheety-writer, only one message at a time.\n// should be changed to queue up in array instead\nexport default function () {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n  const [message, setMessage] = React.useState('Hello!');\n\n  function handleClick(message: string) {\n    setMessage(message);\n    setOpen(true);\n  }\n\n  logger.log = handleClick;\n\n  function handleClose(_event: unknown, reason?: string) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  }\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      open={open}\n      autoHideDuration={2000}\n      onClose={handleClose}\n      message={message}\n      action={[\n        <IconButton\n          key=\"close\"\n          aria-label=\"Close\"\n          color=\"inherit\"\n          className={classes.close}\n          onClick={handleClose}\n        >\n          <CloseIcon />\n        </IconButton>,\n      ]}\n    />\n  );\n}\n","import { ConnectedProps, connect } from 'react-redux';\nimport React from 'react';\nimport AppBar from './app-bar/AppBarContainer';\nimport List from './shopping-list/ListContainer';\nimport AddListDialog from './shopping-list/AddDialogContainer';\nimport AddItemDialog from './item-list/AddDialogContainer';\nimport EditListDialog from './shopping-list/EditDialogContainer';\nimport EditItemDialog from './item-list/EditDialogContainer';\nimport ItemList from './item-list/ListContainer';\nimport { RootState } from '../redux/store';\nimport Notifier from './common/Notifier';\n\nconst connector = connect((state: RootState) => ({\n  isListSelected: state.selectedList !== undefined,\n}));\n\ntype Props = ConnectedProps<typeof connector>;\n\nfunction Main(props: Props) {\n  const isItemView = props.isListSelected;\n  return (\n    <div\n      style={{\n        flex: 1,\n        // border: '1px solid blue',\n        display: 'flex',\n        flexFlow: 'column',\n        height: '100%',\n      }}\n    >\n      <AppBar />\n      {isItemView ? <ItemList /> : <List />}\n      {isItemView ? <AddItemDialog /> : <AddListDialog />}\n      {isItemView ? <EditItemDialog /> : <EditListDialog />}\n      <Notifier />\n    </div>\n  );\n}\n\nexport default connector(Main);\n","import React from 'react';\r\nimport Main from './components/Main';\r\nimport {\r\n  createMuiTheme,\r\n  Theme,\r\n  makeStyles,\r\n  createStyles,\r\n  ThemeProvider,\r\n} from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  props: {\r\n    MuiButtonBase: {\r\n      disableRipple: true,\r\n    },\r\n  },\r\n  transitions: {\r\n    // Disable transitions since they make UI feel slow\r\n    create: () => 'none',\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    app: {\r\n      minHeight: '100vh',\r\n      height: '100%',\r\n      display: 'flex',\r\n      overflow: 'hidden',\r\n      flexDirection: 'column',\r\n    },\r\n  })\r\n);\r\n\r\nexport default function () {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className={classes.app}>\r\n        <Main />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './shopper/App';\r\nimport { store } from './shopper/redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nfunction isDebug(): boolean {\r\n  const url = new URL(window.location.href);\r\n  const param = url.searchParams.get('debug');\r\n  return Boolean(param);\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nif (isDebug()) {\r\n  console.log('No service worker enabled.');\r\n  serviceWorker.unregister();\r\n} else {\r\n  serviceWorker.register();\r\n}\r\n"],"sourceRoot":""}